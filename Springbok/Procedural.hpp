// Springbok Collection Header
// This file was automatically generated by 'gencompheader.py'

#include <Springbok/Procedural/Noise.h>
#include <Springbok/Procedural/RandomNumberGenerator.h>

/* Documentation included from: Procedural/README.md
 * =================================================
 * 
 * # Procedural Module
 * 
 * ## Generating Pseudo-Random Numbers
 * Springbok has it's own, extremly simple, Pseudo-Random generator.
 * 
 * ```cpp
 * RandomNumberGenerator RNG;   // The default constructor initializes the seed by unix time.
 * RNG.getFloat();              // Returns a random float between 0.0f and 1.0f
 * RNG.getNumber(10);           // Returns a random number between 0 and 10, inclusive (e.g. lowest possible result is 0, highest possible result is 10)
 * RNG.getNumber(0, 10);        // Ditto.
 *                              // The template parameter is automatically deduced in above example.
 * RNG.getNumber<float>(0, 10); // Returns a random float between 0 and 10, for example 5.362f
 * RNG.getVec2(Vec2F(-100, -100), Vec2F(100, 100)); // Calculates 2 random numbers between -100 and +100 and puts them into one Vec2, for example Vec2F(43.823f, -22.8590f)
 * 
 * // For convinience sake Springbok defines a global, default initialized RandomNumberGenerator, that you can use.
 * gRandom.getFloat();
 * ```
 * 
 * The generator is very minimal and has a very insignificant overhead of 2 32-Bit Integers. Due to it's simplicity it is also extremly fast.
 * The quality of the generated numbers are higher than that of the C stdlib `rand` and `random` functions, but lower than that of Mersenne Twister.
 * 
 * It is based on the [GameRNG][1] algorithm from IanBullard.
 * 
 *   [1]: http://www.redditmirror.cc/cache/websites/mjolnirstudios.com_7yjlc/mjolnirstudios.com/IanBullard/files/79ffbca75a75720f066d491e9ea935a0-10.html
 * 
 * ### Saving and Loading Seeds
 * 
 * The seed are saved in the two member variables `HighSeed` and `LowSeed` which can be modified and read from.
 * 
 * ```cpp
 * // Save the world seed so that it can be reused later.
 * saveGame["World.LowSeed"]  = WorldRNG.LowSeed;
 * saveGame["World.HighSeed"] = WorldRNG.HighSeed;
 * // [...] Use WorldRNG here
 * ```
 * 
 * ```cpp
 * // Savegame loaded, now regenerate the world with the same seed
 * WorldRNG.LowSeed  = saveGame["World.LowSeed" ].toUInt();
 * WorldRNG.HighSeed = saveGame["World.HighSeed"].toUInt();
 * // [...] WorldRNG will now produce the same series of numbers as at that time when it was saved
 * ```
 * 
 * ### See Also
 * 
 * - [Reference Docs](REFERENCE.md)
*/

/* Documentation included from: Procedural/REFERENCE.md
 * ====================================================
 * 
 * ## class RandomNumberGenerator
 * 
 * A minimal & cheap generator for pseudo-random numbers.
 * 
 * ### Constructors
 * 
 * These all set the seed to the specified parameters.
 * ```cpp
 * RandomNumberGenerator(unsigned int seed = unsigned(std::time(0)));  // Derive the 64-Bit seed from a 32-Bit seed. If no seed is given use the system time as seed.
 * RandomNumberGenerator(unsigned int lowSeed, unsigned int highSeed);
 * RandomNumberGenerator(unsigned long long int fullSeed);
 * ```
 * 
 * ### Generator Functions
 * 
 * Generate random numbers inside a specific range, this Range is always inclusive. (E.g. it is always possible that it returns the max value itself.)
 * ```cpp
 * float getFloat();          // float in [0.0, 1.0]
 * T getNumber(T min, T max); // Number of type T in [min, max].
 * T getNumber(T max);        // [0, max].
 * ```
 * 
 * These functions generate a random number for every component of the vector and return them, again in a vector.
 * ```cpp
 * Vec2<T> getVec2(Vec2<T> min, Vec2<T> max);
 * Vec3<T> getVec3(Vec3<T> min, Vec3<T> max);
 * ```
 * 
 * Generates 32 random bits, all other generator functions are based on this one.
 * ```cpp
 * unsigned int generate();
 * ```
 * 
 * ### Member Variables
 * 
 * ```cpp
 * unsigned int HighSeed; // First 32 Bits of the Seed.
 * unsigned int LowSeed;  // Last  32 Bits of the Seed.
 * ```
 * 
 * ### Global Variables
 * 
 * Outside of class scope
 * ```cpp
 * extern RandomNumberGenerator gRNG; // A global, default-initialized instance of the RandomNumberGenerator for convinience.
 * ```
 * 
*/

